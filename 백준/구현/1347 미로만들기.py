'''
문제
홍준이는 미로 안의 한 칸에 남쪽을 보며 서있다. 미로는 직사각형 격자모양이고, 각 칸은 이동할 수 있거나, 벽을 포함하고 있다. 모든 행과 열에는 적어도 하나의 이동할 수 있는 칸이 있다. 홍준이는 미로에서 모든 행과 열의 이동할 수 있는 칸을 걸어다녔다. 그러면서 자신의 움직임을 모두 노트에 쓰기로 했다. 홍준이는 미로의 지도를 자기 노트만을 이용해서 그리려고 한다.

입력으로 홍준이가 적은 내용을 나타내는 문자열이 주어진다. 각 문자 하나는 한 번의 움직임을 말한다. ‘F’는 앞으로 한 칸 움직인 것이고, ‘L'과 ’R'은 방향을 왼쪽 또는 오른쪽으로 전환한 것이다. 즉, 90도를 회전하면서, 위치는 그대로인 것이다.

===================================================
입력
첫째 줄에 홍준이가 적은 내용의 길이가 주어진다. 길이는 0보다 크고, 50보다 작다. 둘째 줄에 홍준이가 적은 내용이 내용이 주어진다.
===================================================
출력
첫째 줄에 미로 지도를 출력한다. ‘.’은 이동할 수 있는 칸이고, ‘#’는 벽이다.
===================================================
'''


#입력받은 단어들을 통해 홍준이의 위치 변화를 저장하는 것과 좌표 중 가장 큰 x,y값과 가장 작은 x,y값의 차를 구하는 게 중요 포인트다. max, min 함수의 key값을 이용한 조건 변화와 람다식의 중요성을 제대로 배우게 되는 계기가 되었다.


from collections import deque
n = int(input())
words = input().strip()
x, y, c = 0,0,0
#남, 서, 북, 동
dx = [1, 0, -1, 0]
dy = [0, -1, 0, 1]
arr = [[0,0]]
for w in words:
    #방향을 확인하고 좌표 이동 시 좌표값 저장
    if w == "R":
        c = c+1 if c<3 else 0
    elif w == "L":
        c = c-1 if c>0 else 3
    else:
        x = x + dx[c]
        y = y + dy[c]
        arr.append([x,y])

arr.sort(key = lambda x: (x[0], x[1]))

#맵의 크기를 구하기 위해서 가장 큰 값과 가장 작은 값의 차를 구해야 한다.
maxx = max(arr, key = lambda x: x[0])[0]
maxy = max(arr, key = lambda x: x[0])[1]
minx = min(arr, key = lambda x: x[0])[0]
miny = min(arr, key = lambda x: x[1])[1]

mx = max(arr, key = lambda x: x[0])[0] - min(arr, key = lambda x: x[0])[0]+1
my = max(arr, key = lambda x: x[1])[1] - min(arr, key = lambda x: x[1])[1]+1
graph = [["#" for _ in range(my)] for _ in range(mx)]

#(0,0)을 기준으로 좌표들을 재배치해야한다.
# ex) [-1, 1], [0, 0], [0, 1], [0, 1], [0, 1], [0, 2], [1, 1] -> [0,1], [0, 1], [1, 0], [1, 1], [1, 1], [1, 1], [1, 2], [2, 1]
for idx, val in enumerate(arr):
    arr[idx][0] -= minx
    arr[idx][1] -= miny

for i in arr:
    graph[i[0]][i[1]] = "."

for i in graph:
    print(*i, sep="")
