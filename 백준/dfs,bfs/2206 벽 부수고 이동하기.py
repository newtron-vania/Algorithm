'''
문제
N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.

만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 벽을 한 개 까지 부수고 이동하여도 된다.

한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.

맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.
==========================================================
입력
첫째 줄에 N(1 ≤ N ≤ 1,000), M(1 ≤ M ≤ 1,000)이 주어진다. 다음 N개의 줄에 M개의 숫자로 맵이 주어진다. (1, 1)과 (N, M)은 항상 0이라고 가정하자.

출력
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.
==========================================================
예제 입력 1 
6 4
0100
1110
1000
0000
0111
0000

예제 출력 1 
15
==========================================================
예제 입력 2 
4 4
0111
1111
1111
1110

예제 출력 2 
-1

'''

#x,y 좌표뿐 아니라 벽을 부쉈는지, 부수지 않았는지까지의 경우까지 모두 저장해야 하므로 3차원 리스트로 저장해야 한다. 아직 부수지 않았다면 벽이 있는 곳을 지나간 후 부쉈다는 경로에 저장하면 된다.

from collections import deque
def bfs(n, m, x, y, c, graph, cache):
    #배열의 크기에 맞춤
    n -= 1
    m -= 1
    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
    q = deque([(x,y,c)])
    while q:
        x, y, c = q.popleft()
        if x == n and y == m:
            return cache[x][y][c]
        for i in range(4):
            hx, hy = x + dx[i], y + dy[i]
            if hx < 0 or hy < 0 or hx > n or hy > m:
                continue
            #벽이 있고, 벽을 부술 수 있을 때
            if graph[hx][hy] == 1 and c == 0:
                q.append((hx, hy, 1))
                #벽을 부술 수 없게 된 경우로 옮겨지므로, 방문했는지는 확인할 필요가 없음
                cache[hx][hy][1] = cache[x][y][0] +1
            #벽이 없고(벽을 부술 수 있는지는 확인 x), 그곳에 방문하지 않았을 때 
            elif graph[hx][hy] == 0 and cache[hx][hy][c] == 0:
                q.append((hx, hy, c))
                cache[hx][hy][c] = cache[x][y][c] + 1
    return -1

n, m = map(int, input().split())
graph = [list(map(int, input())) for _ in range(n)]
#cache[x][y][c]  x : x좌표, y : y좌표, c : 부순 경험이 있는지 확인
cache = [[[0 for _ in range(2)] for _ in range(m)] for _ in range(n)]
cache[0][0][0] = 1

print(bfs(n, m, 0, 0, 0, graph, cache))
